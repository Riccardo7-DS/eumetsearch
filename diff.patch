diff --git a/main.py b/main.py
index fbca36e..c4bdfe2 100644
--- a/main.py
+++ b/main.py
@@ -3,13 +3,71 @@ from dotenv import load_dotenv
 from utils import products_list
 from utils import EUMDownloader, bbox_mtg, init_logging, MTGDataParallel
 import argparse
-import cProfile
-import pstats
-import numpy as np
-import logging
+from datetime import datetime
+import calendar
 from memory_profiler import profile
 
-logger = logging.getLogger(__name__)
+def main_monthly(args, start_date, end_date):
+    logger = init_logging("./logger_mtg_fci.log", verbose=False)
+    cpus = os.cpu_count()
+    
+    # Load environment variables from .env file
+    load_dotenv()
+    
+    product_id = products_list["MTG-1"]["product_id"]
+    
+    # Define bounding box
+    bbox = bbox_mtg()
+    W, S, E, N = bbox[0], bbox[1], bbox[2], bbox[3]
+    NSWE = [N, S, W, E]
+    
+    # Initialize downloader once
+    downloader = EUMDownloader(
+        product_id=product_id, 
+        output_dir="./data/datastore_data",
+        max_parallel_conns=10,
+    )
+    
+    # Convert start/end dates to datetime objects
+    start = datetime.fromisoformat(start_date)
+    end = datetime.fromisoformat(end_date)
+    current = start
+
+    while current <= end:
+        # Compute last day of current month
+        last_day = calendar.monthrange(current.year, current.month)[1]
+        month_end = current.replace(day=last_day, hour=23, minute=59, second=59)
+        if month_end > end:
+            month_end = end
+        
+        # Download data for this month
+        logger.info(f"Downloading data for {current.strftime('%Y-%m')}")
+        downloader.download_interval(
+            start_time=current.isoformat(), 
+            end_time=month_end.isoformat(),
+            bounding_box=NSWE, 
+            observations_per_day=5,
+            jump_minutes=60,
+            start_hour=int(start.hour)
+        )
+        
+        # Create MTGDataParallel object with a unique label for the month
+        label = f"mtg_{current.year}_{current.month:02d}"
+        logger.info(f"Processing MTGDataParallel for {label}")
+        MTGDataParallel(
+            args, 
+            downloader, 
+            area_reprojection="mtg_fci_latlon_1km",
+            reprojection=args.resampler,
+            chunks={"time": 10, "lat": 500, "lon": 500},
+            label=label
+        )
+        
+        # Move to first day of next month
+        if current.month == 12:
+            current = current.replace(year=current.year + 1, month=1, day=1)
+        else:
+            current = current.replace(month=current.month + 1, day=1)
 
 @profile
 def main(args, start_date, end_date):
@@ -35,7 +93,7 @@ def main(args, start_date, end_date):
         start_time=start_date, 
         end_time=end_date,
         bounding_box=NSWE, 
-        observations_per_day=1,
+        observations_per_day=6,
         jump_minutes=60
     )
     
@@ -43,7 +101,8 @@ def main(args, start_date, end_date):
         downloader, 
         area_reprojection="mtg_fci_latlon_1km",
         reprojection=args.resampler,
-        chunks={"time":1, "lat":500, "lon":500}
+        chunks={"time":10, "lat":500, "lon":500},
+        processes=8
     )
 
 
@@ -61,31 +120,30 @@ def monitor_resources(interval=1.0, log_file="resource_log.txt"):
             except Exception:
                 break
 
-from contextlib import contextmanager
-
 if __name__ == "__main__":
 
 
     import psutil
     import time
     import threading, traceback
+    import logging
+    logger = logging.getLogger(__name__)
 
     argparser = argparse.ArgumentParser(description="MTG FCI Data Downloader")
-    argparser.add_argument('-t', '--threading', action='store_true', help='Use threading for I/O operations')
+    argparser.add_argument('-t', '--threading', action='store_false', help='Use threading for I/O operations')
     argparser.add_argument('-y', '--yes', action='store_true', help='Automatically confirm deletion of zarr')
     argparser.add_argument('-r', '--remove', action='store_true', help='Automatically confirm deletion of source files')
     argparser.add_argument("--resampler", default=os.getenv("resampler", "nearest"))
     args = argparser.parse_args()
     
-    start_date = "2025-05-02T00:00:00"
-    end_date = "2025-05-03T00:15:00"
+    start_date = "2025-05-01T09:00:00"
+    end_date = "2025-05-01T09:30:00"
 
     try:
         monitor_thread = threading.Thread(target=monitor_resources, daemon=True)
         monitor_thread.start()
         # with cProfile.Profile() as pr:
-        main(args, start_date, end_date)
-
+        main_monthly(args, start_date, end_date)
         # stats = pstats.Stats(pr)
         # stats.sort_stats("cumtime").print_stats(20)  # to
     except Exception as e:
diff --git a/src/utils/downloader.py b/src/utils/downloader.py
index 6a4daec..d5b0505 100644
--- a/src/utils/downloader.py
+++ b/src/utils/downloader.py
@@ -23,12 +23,15 @@ import xarray as xr
 from dask.diagnostics import ProgressBar
 from typing import Union
 from http.client import IncompleteRead
+import json 
 from urllib3.exceptions import ProtocolError
 from threading import Thread, Lock
 tb = ProgressBar().register()
 
 logger = logging.getLogger(__name__)
 
+
+
 """
 Part of the code has been adapted from monkey_wrench https://github.com/pkhalaj/monkey-wrench
 """
@@ -395,7 +398,8 @@ class EUMDownloader:
 class MTGDataParallel():
     def __init__(self,
                 args:dict,  
-                downloader: EUMDownloader, 
+                downloader: EUMDownloader,
+                label:str, 
                 channels:list= ['vis_06',  'vis_08'],
                 area_reprojection:Union[None, str]=None,
                 reprojection="nearest",
@@ -432,10 +436,9 @@ class MTGDataParallel():
         os.makedirs(self.nat_path, exist_ok=True)
 
         self.zarr_lock = Lock()
-        self.netcdf_lock = Lock()  
-        self.reproj_lock = Lock()
+        self.nectdf_lock = Lock()
 
-        self.download_to_zarr(args, self.file_list, initialize_dataset)
+        self.download_to_zarr(args, self.file_list, initialize_dataset, label)
 
     def _get_size(self, area_reprojection:str):
         if area_reprojection == "worldeqc3km":
@@ -450,9 +453,18 @@ class MTGDataParallel():
             return [18000, 36000]
         else: 
             raise NotImplementedError("Area {} not implemented".format(area_reprojection))
+        
 
+    def _mark_done(self, task_id: str):
+        if self.status_file.exists():
+            status = json.loads(self.status_file.read_text())
+        else:
+            status = {}
+        status[task_id] = "done"
+        self.status_file.write_text(json.dumps(status, indent=2))
 
-    def download_to_zarr(self, args, file_list: list, initialize_dataset: bool):
+
+    def download_to_zarr(self, args, file_list:list, initialize_dataset:bool, label:str):
         from utils import ZarrStore
         t0 = time.time()
 
@@ -483,16 +495,17 @@ class MTGDataParallel():
         else:
             example_ds = None
 
-        store = ZarrStore(
-            self.output_dir,
-            size=self.size,
-            file_list=self.file_list,
-            channels=self.channels,
-            chunks=self.chunks,
-            ds=example_ds,
-            yes_flag=args.yes
-        )
-
+        store = ZarrStore(self.output_dir, 
+                          size=self.size, 
+                          file_list=self.file_list,
+                          channels=self.channels,
+                          chunks= self.chunks,
+                          label=label,
+                          ds= example_ds,
+                          yes_flag=args.yes)
+        
+        self.status_file = Path(store.path).with_suffix(".status.json")
+        
         if args.remove:
             self._remove_all_tempfiles()
 
@@ -690,7 +703,7 @@ class MTGDataParallel():
         from pyproj import CRS
         from utils import extract_custom_area
 
-        area_def = extract_custom_area("mtg_fci_latlon_1km", "./src/utils/areas.yaml")
+        area_def = extract_custom_area(self._reproject, "./src/utils/areas.yaml")
         return scn.resample(area_def, radius_of_influence=5000, resampler=self._reprojection)
     
     def _dataset_reproject_loop(self, scn):
@@ -890,8 +903,8 @@ class MTGDataParallel():
 
         debug_time_vars(ds)
 
-        if zarr_path is not None:
-            with self.zarr_lock:
+        with self.nectdf_lock:
+            if zarr_path is not None:
                 ds.to_zarr(
                     zarr_path,
                     # append_dim="time",
@@ -899,5 +912,8 @@ class MTGDataParallel():
                     compute=True
                 )
                 read_pbar.update(1)
-        else:
-            return ds
+
+                task_id = f"{t_start}_{t}"
+                self._mark_done(task_id)
+            else:
+                return ds
diff --git a/src/utils/general.py b/src/utils/general.py
index 0d0967c..a6ea63a 100644
--- a/src/utils/general.py
+++ b/src/utils/general.py
@@ -174,6 +174,37 @@ def init_logging(log_file:str=None, verbose:bool=False)-> logging.Logger:
     return logger
 
 
+def ndvi_colormap(colormap: Literal["diverging","sequential"]):
+    from  matplotlib.colors import ListedColormap, BoundaryNorm, LinearSegmentedColormap
+
+
+    if colormap == "diverging":
+
+        # List of corresponding colors in hexadecimal format (reversed order)
+        cols = [
+            "#c0c0c0",
+            "#954535",
+            "#FF0000",
+            "#E97451",
+            "#FFA500",
+            "#FFD700",
+            "#DFFF00",
+            "#CCFF00",
+            "#00FF00",
+            "#00BB00",
+            "#008800",
+            "#006600",
+            "#7F00FF"
+        ]
+
+    elif colormap == "sequential":
+        cols = ["#ffffe5","#f7fcb9","#d9f0a3","#addd8e","#78c679","#41ab5d",
+                "#238443","#006837","#004529"]
+
+    cmap_custom = ListedColormap(cols)
+    return cmap_custom
+
+
 def debug_time_vars(ds, vars_to_check=("timeStart", "timeEnd", "identifier"), n_preview=5):
     """
     Print dtype, shape, and sample values of time-related variables in an xarray Dataset.
diff --git a/src/utils/zarr.py b/src/utils/zarr.py
index bf7e873..866fc71 100644
--- a/src/utils/zarr.py
+++ b/src/utils/zarr.py
@@ -18,6 +18,7 @@ class ZarrStore:
                  file_list:list,
                  channels:list, 
                  ds:xr.Dataset=None,
+                 label:str="VIS",
                  chunks: dict = {"time": 1, "lat": "auto", "lon": "auto"}, 
                  n_workers:PositiveInt=4,
                  yes_flag:bool=False):
@@ -32,7 +33,7 @@ class ZarrStore:
         self._n_workers = n_workers
 
         zarr_path , encoding = self.zarr_store_create(
-            label='VIS', 
+            label=label, 
             channels=channels, 
             size=size,
             ds_example=ds,
